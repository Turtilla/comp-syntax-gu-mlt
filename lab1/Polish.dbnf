-- utterances and sentences
Utt ::= Utt Punct        # head punct
Utt ::= Conj Utt         # cc head
Utt ::= NP_obl comma Utt # cc punct head
Utt ::= parenth Utt parenth # punct head punct

Utt ::= S
Utt ::= QS
Utt ::= Imp
Utt ::= NP
Utt ::= AP
Utt ::= IP
Utt ::= IAdv
Utt ::= Num

-- sentences
S ::= VP # head
S ::= VP NP # head nsubj
S ::= neg VP NP # advmod head nsubj
S ::= NP neg? VP aux # nsubj advmod head aux
S ::= cop NP AdV? neg? Comp # cop nsubj advmod advmod head

S ::= NP VP # nsubj head
S ::= NP neg VP  # nsubj advmod head
S ::= NP aux neg? VP  # nsubj aux advmod head
S ::= NP neg? aux VP  # nsubj advmod aux head

S ::= NP cop AdV? neg? Comp # nsubj cop advmod advmod head
S ::= NP neg? cop AdV? Comp # nsubj advmod cop advmod head

S ::= NP cop AdV? neg? VP_pass # nsubj:pass aux:pass advmod advmod head

S ::= NP be_V neg? SC # nsubj head advmod ccomp
S ::= NP have neg? be_V SC # nsubj aux advmod head ccomp
S ::= NP aux neg? be_V SC # nsubj aux advmod head ccomp

S ::= SC VP # csubj head
S ::= SC neg VP # csubj advmod head
S ::= SC cop neg? VP_pass # csubj:pass aux:pass advmod head
S ::= S_front NP VS # parataxis nsubj head

QS ::= NP neg? VP # nsubj advmod head
QS ::= cop NP neg? Comp # cop nsubj advmod head
QS ::= cop neg? NP Comp # cop advmod nsubj head

QS ::= cop NP neg? VP_pass # aux:pass nsubj:pass advmod head

QS ::= IP VP # nsubj head
QS ::= IP Pron VP # nsubj obj head
QS ::= IP neg VP # nsubj advmod head
QS ::= IP Pron neg VP # nsubj obj advmod head
QS ::= IP cop neg? Comp # nsubj cop advmod head

QS ::= IP cop neg? VP_pass # nsubj:pass aux:pass advmod head

QS ::= IAdv NP neg? VP # advmod nsubj advmod head
QS ::= IAdv cop NP neg? Comp # advmod cop nsubj advmod head
QS ::= IAdv cop neg NP Comp # advmod cop nsubj advmod head

QS ::= IAdv cop NP neg? VP_pass # advmod aux:pass nsubj:pass advmod head

-- indirect questions
QS ::= if S # mark head
QS ::= IP NP does? neg? VPSlash # obj nsubj nsubj advmod head
QS ::= IP NP aux neg? have? VPSlash # obj nsubj aux advmod aux head
QS ::= IAdv NP do? neg? VP # advmod nsubj aux advmod head
QS ::= IAdv NP aux neg? have? VP # advmod nsubj aux advmod aux head
QS ::= IAdv NP cop neg? Comp # advmod nsubj cop advmod head

RS ::= RP VP # nsubj head
RS ::= RP do neg VP # nsubj aux advmod head
RS ::= RP have neg? VP # nsubj aux advmod head
RS ::= RP cop neg? Comp # nsubj cop advmod head
RS ::= RP have neg? cop Comp # nsubj aux advmod cop head

RS ::= RP NP VPSlash # obj nsubj head
RS ::= RP NP do neg VPSlash # obj nsubj aux advmod head
RS ::= NP VPSlash # nsubj head
RS ::= NP do neg VPSlash # nsubj aux advmod head

-- imperatives
Imp ::= neg? VP # advmod head
Imp ::= neg? cop Comp # advmod cop head

-- sentences with adverbials
S  ::= S_subcomma S # advcl head
S  ::= S S_sub # head advcl
S  ::= Adv_comma S # advmod head
S  ::= NP_oblcomma S # nmod head

-- embedded sentences
SC ::= S_that
SC ::= QS
SC ::= VP_to


VP ::= V
VP ::= V aux # head aux
VP ::= aux # # 0.001
VP ::= V2 NP  # head obj
VP ::= V2 NP_obl # head obl
VP ::= V3 NP NP # head iobj obj
VP ::= V2C NP NP # head obj xcomp
VP ::= V2C NP AP # head obj xcomp
VP ::= VS S_that # head ccomp
VP ::= VV VP_to # head xcomp
VP ::= VV VP # head xcomp
VP ::= V2V NP VP # head obj xcomp
VP ::= V2V NP VP_to # head obj xcomp
VP ::= VP comma? Adv # head punct advmod
VP ::= AdV VP # advmod head 
VP ::= VP NP_obl # head obl # 0.001
VP ::= VS S_direct # head parataxis

VP_pass ::= V2
VP_pass ::= VP_pass Adv # head advmod
VP_pass ::= VP_pass NP_obl # head nmod

VPSlash ::= V2
VPSlash ::= VPSlash NP_obl  # head obl # 0.001
VPSlash ::= VPSlash Adv # head advmod
VPSlash ::= VP Prep # head case # 0.001

S_that ::= that? S # mark head

S_direct ::= colon S # punct head
S_direct ::= colon quote S quote # punct punct head punct
S_front  ::= S comma # head punct
S_front  ::= quote S quote comma # punct head punct punct

Comp ::= AP
Comp ::= NP
Comp ::= Adv
Comp ::= NP_obl
Comp ::= Comp comma? NP_obl # head punct nmod
Comp ::= Comp comma? Adv # head punct advmod

-- VP with to
VP_to ::= neg? to VP # advmod mark head
VP_to ::= neg? to cop Comp # advmod mark cop head

-- oblique noun phrase
NP_obl ::= Prep NP # case head

-- noun phrases
NP ::= PN
NP ::= Pron
NP ::= Num # # 0.1
NP ::= Det # # 0.1

NP ::= Det? CN # det head
NP ::= NP comma? NP_obl # head punct nmod
NP ::= Predet NP # det:predet head
NP ::= NP_poss CN # nmod:poss head
NP ::= Num NP # nummod head
NP ::= N PN # head flat
NP ::= NP SC # head acl
NP ::= NP comma? S_sub # head punct acl
NP ::= NP comma? RS # head punct acl:relcl
NP ::= Symb Num # head nummod
NP ::= Num Symb # nummod head
NP ::= NP comma? VP_pass # head punct acl # 0.01

NP_poss ::= NP 's # head case
NP_poss ::= Pron_poss

-- some very special rules ---
NP        ::= Det CN_quoted # det head
CN_quoted ::= quote CN quote # punct head punct
NP        ::= NP NP_appos # head appos # 0.01
NP_appos  ::= Punct_appos NP # punct head

Num ::= Card
Num ::= Digits

CN ::= N
CN ::= AP CN # amod head
CN ::= CN AP # head amod
CN ::= CN comma? AP # head punct amod # 0.01

PN ::= PN_one PN # head flat

N ::= N_one N # compound head
N ::= PN CN # compound head

Card ::= Card_one Card # compound head

IP ::= IDet CN # det head

-- adjectival phrases
AP ::= A
AP ::= AdA AP     # advmod head
AP ::= AP AdA     # head advmod
AP ::= AP NP_obl  # head nmod

-- adverbials
-- Adv ::= Prep NP # case head

S_sub       ::= comma? Subj S # punct mark head
S_subcomma  ::= Subj S comma? # mark head punct
Adv_comma   ::= Adv comma? # head punct
NP_oblcomma ::= NP_obl comma? # head punct
S_sub       ::= comma? Subj VP # punct mark head # 0.1
S_subcomma  ::= Subj VP comma? # mark head punct # 0.1

-- coordination
S       ::= Conj_pre? ListS S_conj # cc:preconj head conj
ListS   ::= S
ListS   ::= ListS S_comma # head conj
S_conj  ::= comma? Conj S # punct cc head
S_comma ::= comma S # punct head

NP       ::= Conj_pre? ListNP NP_conj # cc:preconj head conj
ListNP   ::= NP
ListNP   ::= ListNP NP_comma # head conj
NP_conj  ::= comma? Conj NP # punct cc head
NP_comma ::= comma NP # punct head

AP       ::= Conj_pre? ListAP AP_conj # cc:preconj head conj
ListAP   ::= AP
ListAP   ::= ListAP AP_comma # head conj
AP_conj  ::= comma? Conj AP # punct cc head
AP_comma ::= comma AP # punct head

VP       ::= Conj_pre? ListVP VP_conj # cc:preconj head conj
ListVP   ::= VP
ListVP   ::= ListVP VP_comma # head conj
VP_conj  ::= comma? Conj VP # punct cc head
VP_comma ::= comma VP # punct head

-- in Adv conjunctions, we want to include NP_obl parts: all that matters for UD is the category of the first conjunct
Adv       ::= Conj_pre? ListAdv Adv_conj # cc:preconj head conj
ListAdv   ::= Adv
ListAdv   ::= ListAdv Adv_comma # head conj
Adv_conj  ::= comma? Conj Adv # punct cc head
Adv_conj  ::= comma? Conj NP_obl # punct cc head
Adv_comma ::= comma Adv # punct head
Adv_comma ::= comma NP_obl # punct head

NP_obl     ::= Conj_pre? ListNP_obl Adv_conj # cc:preconj head conj
ListNP_obl ::= NP_obl
ListNP_obl ::= ListNP_obl Adv_comma # head conj


-- POS tag configurations
#pos AUX cop do have aux
#pos VERB V V2 V3 VS VV V2V V2C be_V
#pos NOUN N N_one
#pos ADJ A
#pos PROPN PN PN_one
#pos ADV Adv IAdv AdA AdV Predet neg
#pos SCONJ Subj that if
#pos CCONJ Conj Conj_pre
#pos DET Det IDet
#pos PRON Pron IP RP Pron_poss there it
#pos PART ze 
#pos PUNCT Punct Punct_appos comma quote colon parenth
#pos NUM Card Digits Card_one
#pos ADP Prep
#pos SYM Symb

-- structural word lexicon: normal categories
#token Prep w z pod nad u od do 
#token IP kto co komu czemu kogo czego kim czym 
#token IAdv kiedy gdzie jak czemu czy
#token AdA bardzo za
#token AdV definitywnie zawsze nigdy
#token Det ten ta to tej tego temu tym
#token Pron ja mnie mna ty tobie ciebie toba on nim jemu ona nia jej my nam nami wy wam wami oni nimi nim one im 
#token Subj jezeli poniewaz jako ze 
#token aux jest byl byla byli byly sa bedzie beda zostal zostala zostali zostana zostanie
#token Punct . ! ?
#token Punct_appos , :
#token Conj i albo
#token Conj_pre oboje zaden 
#token IDet ktory
#token Pron_poss moj moja moje twoj twoja twoje jej jego nasz nasza nasze wasz wasza wasze ich
#token RP ktory ktora ktore
#token Card piec

-- structural word lexicon: syncategorematic words
#token cop jest byl byla byli byly sa bedzie beda 
#token be_V jest byl byla byli byly sa bedzie beda
#token do do does did
#token have have has had
#token neg nie
#token that that
#token to to
#token it to
#token if jesli jezeli
#token there there
#token comma ,
#token colon :
#token quote "
#token 's 's
#token parenth ( ) [ ]

-- content word lexicon
#token PN John Mary
#token V spi spia spal spala spali idzie ida szedl szla szli spiewa spiewaja spiewal spiewala spiewali
#token V2 widzi widza widzial widziala widzieli kocha kochaja kochal kochala kochali daje daja dawal dawala dawali
#token V2 wie wiedza wiedzial wiedziala wiedzieli
#token V3 daje daja dal dala dali
#token V2C dzwoni dzwonia dzwonil dzwonila dzwonili
#token V2V widzi widza widzial widziala widzieli
#token VS mowi mowia powiedzial powiedziala powiedzieli
#token VV chce chca chcial chciala chcieli
#token A stary stara stare starzy dobry dobra dobre dobrzy ciekawy ciekawa ciekawe ciekawi czarny czarna czarne czarni
#token N milosc sen sny czlowiek ludzie kobieta kobiety kot koty doktor doktorzy piwo piwa
#token N dom domy prezydent prezydenci ksiezyc Ziemia dziewczyna dziewczyny
#token Adv teraz dzisiaj tu wczesniej tam wczoraj jutro zawsze
#token Predet prawdopodobnie tylko
#token Symb $





